name: Trivy Security Scan

inputs:
  config-path:
    default: 'scripts/trivy/trivy.yml'
    description: 'Path to trivy.yml relative to the consumer repo'
  severity:
    default: 'HIGH,CRITICAL'
    description: 'Comma-separated severities that mark the scan failed'
  scanners:
    default: 'misconfig,secret'
    description: 'Trivy scanners (comma-separated)'
  open-issue:
    default: 'true'
    description: 'true → open/update an issue when findings exist'
  issue-labels:
    default: 'security,trivy'
    description: 'Comma-separated labels to add to the issue'

outputs:
  scan-status:
    description: '0 = clean, 1 = findings present'
  issue-url:
    description: 'URL of created/updated issue (if any)'

runs:
  using: 'composite'
  steps:
    - uses: actions/checkout@v4

    - name: Install Trivy
      shell: bash
      run: |
        set -euo pipefail
        echo "🔧 Installing Trivy …"
        curl -sSfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh \
          | sudo sh -s -- -b /usr/local/bin

    - name: Run scan and print table
      id: scan
      shell: bash
      run: |
        set +e
        trivy fs \
          --config "${{ inputs.config-path }}" \
          --scanners "${{ inputs.scanners }}" \
          --severity "${{ inputs.severity }}" \
          --format table \
          --output trivy-report.txt \
          --exit-code 1 \
          .
        status=$?
        set -e

        echo "==================== Trivy Report ===================="
        if [[ -s trivy-report.txt ]]; then
          cat trivy-report.txt
        else
          echo "No findings at requested severities."
        fi
        echo "======================================================"

        echo "scan-status=$status" >> "$GITHUB_OUTPUT"
        exit $status

    - name: Create/update issue (nightly main only)
      if: github.event_name == 'schedule' && github.ref == 'refs/heads/main' && failure()
      uses: actions/github-script@v7
      with:
        script: |
          const fs   = require('fs');
          const core = require('@actions/core');
          const { owner, repo } = context.repo;

          const report = fs.readFileSync('trivy-report.txt', 'utf8')
                           .trim()
                           .slice(0, 60000);

          const title = `⚠️ Trivy scan failed on ${context.ref}`;
          const labels = '${{ inputs.issue-labels }}'.split(',');
          const body = `
          **Trivy security scan detected HIGH/CRITICAL findings.**

          \`\`\`
          ${report}
          \`\`\`

          _Workflow run:_ ${process.env.GITHUB_SERVER_URL}/${process.env.GITHUB_REPOSITORY}/actions/runs/${process.env.GITHUB_RUN_ID}
          `;

          const { data: issues } = await github.rest.issues.listForRepo({
            owner, repo, state: 'open', labels: labels.join(','), per_page: 100
          });
          const existing = issues.find(i => i.title === title);

          if (existing) {
            await github.rest.issues.createComment({ owner, repo, issue_number: existing.number, body });
            core.setOutput('issue-url', existing.html_url);
            console.log(`🔄  Commented on existing issue: ${existing.html_url}`);
          } else {
            const created = await github.rest.issues.create({ owner, repo, title, body, labels });
            core.setOutput('issue-url', created.data.html_url);
            console.log(`🆕  Created new issue: ${created.data.html_url}`);
          }
